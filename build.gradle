plugins {
  id 'groovy'
  id 'application'
  id 'org.standardout.eclipseconfig' version '1.1.0'
  id 'maven'
  id 'osgi'
  id 'com.bmuschko.docker-java-application' version '2.6.8'
  id "nebula.ospackage-application" version "3.6.1"
  id 'org.ajoberstar.grgit' version '1.5.0'
}

sourceCompatibility = '1.8'

group = 'to.wetransform'

project.ext {
  cliVersion = '3.4.0-SNAPSHOT'
  haleVersion = '3.4.0-SNAPSHOT'
}

version = '3.4.0-SNAPSHOT'

/*
 * Dependencies
 */

repositories {
//  mavenLocal() // for testing
  
  maven { // wetransform release repository (HALE releases and Eclipse dependencies)
    url 'https://artifactory.wetransform.to/artifactory/libs-release-local'
  }
  maven { // wetransform snapshot repository (HALE snapshots)
    url 'https://artifactory.wetransform.to/artifactory/libs-snapshot-local'
  }

  // these need to before jcenter/MavenCentral for retrieving JAI
  maven {
    url 'http://download.java.net/maven/2'
  }
  maven {
    url 'http://download.osgeo.org/webdav/geotools/'
  }

  maven { // HALE artifactory (dependencies for HALE)
    url 'http://artifactory.esdi-humboldt.eu/artifactory/libs-release/'
  }

  maven {
    url 'http://repo.opengeo.org'
  }
  jcenter()
}

dependencies {
  // hale CLI
  compile "to.wetransform:hale-cli:$cliVersion"

  // custom dependencies
  compile "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.align.groovy:$haleVersion"

  // Testing
  testCompile 'junit:junit:4.12'
  testCompile 'com.github.stefanbirkner:system-rules:1.16.0'
}

configurations.all {
  // ensure SNAPSHOTs are updated every time if needed
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

mainClassName = 'to.wetransform.halecli.CLI'
applicationName = 'hale'
applicationDefaultJvmArgs = [
  '-Dcache.level1.enabled=false',
  '-Dcache.level1.size=0',
  '-Dcache.level2.enabled=false',
  '-Dcache.level2.size=0'
]

/*
 * Custom run configuurations
 */

/*
task(generateSchemaMapping, dependsOn: 'classes', type: JavaExec) {
  def alignmentsPath = '../inspire-alignements'
  
  main = mainClassName
  classpath = sourceSets.main.runtimeClasspath
  args('rlp', 'match-schemas',
    '--reference-schema',
    alignmentsPath + '/schemas/NAS_6.0.1/schema/aaa.xsd',
    '--target-schema',
    'testbed/dbschema.hsd'
  )
  jvmArgs.addAll(applicationDefaultJvmArgs)
}
*/

/*
 * plugin.xml and OSGi manifest
 *
 * For the plugin.xml file to be recognised there must be an
 * OSGi manifest. In the resources is a dummy file that is required
 * for tests and execution from within Eclipse or Gradle.
 * In the build Jar, the manifest file is overriden.
 */
jar {
  manifest {
    symbolicName = 'to.wetransform.hale.rlp.cli;singleton:=true'
    instruction 'Bundle-Vendor', 'wetransform GmbH'
  }
}

/*
 * OS packaging
 */

ospackage {
  packageName = 'hale-cli'

  link("/usr/local/bin/$applicationName", "/opt/$applicationName/bin/$applicationName")
  link("/etc/bash_completion.d/hale", "/opt/$applicationName/etc/bash_completion.sh")
}

ospackage_application {
  prefix = "/opt"
}

distributions {
  main {
    contents {
      from(file('etc')) {
        into 'etc'
      }
    }
  }
}

/*
 * Docker configuration
 * see https://github.com/bmuschko/gradle-docker-plugin
 */

docker {
  javaApplication {
    baseImage = 'isuper/java-oracle:server_jre_8'
    maintainer = 'Simon Templer "simon@wetransform.to"'
    tag = "wetransform/${project.name}:${project.version}"
  }

  url = project.hasProperty('dockerHost') ? dockerHost : 'http://localdocker:2375'

  registryCredentials {
    url = 'https://index.docker.io/v1/'
    username = project.hasProperty('dockerHubUsername') ? dockerHubUsername : ''
    password = project.hasProperty('dockerHubPassword') ? dockerHubPassword : ''
    email = project.hasProperty('dockerHubEmail') ? dockerHubEmail : ''
  }
}

dockerPushImage {
  // workaround for wrong image name used when pushing to docker hub
  imageName = project.tasks.dockerBuildImage.getTag().split(':')[0]
  tag = project.tasks.dockerBuildImage.getTag().split(':')[1]
}

dockerDistTar {
  def buildTime = java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_INSTANT);
  label('git.sha': grgit.head().id, 'git.branch': grgit.branch.current.name, 'build.version': version, 'build.time': buildTime)
}


/*
 * Packaging and publishing
 */

// package groovydoc into a jar file
task packageJavadoc(type: Jar, dependsOn: 'groovydoc') {
  from groovydoc.destinationDir
  classifier = 'javadoc'
}

// groovydoc task work-around
configurations {
  jansi.extendsFrom(runtime)
}
groovydoc {
  groovyClasspath = project.configurations.jansi
}
dependencies {
  jansi 'org.fusesource.jansi:jansi:1.11'
}

// package source into a jar file
task packageSources(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

// define artifacts for upload
artifacts {
  archives jar
  archives packageJavadoc
  archives packageSources
}

// exclude distZip ands distTar artifacts
configurations.archives.with {
  artifacts.remove artifacts.find { it.archiveTask.is distZip }
  artifacts.remove artifacts.find { it.archiveTask.is distTar }
}

uploadArchives {
  repositories {
    mavenDeployer {

      // upload to wetransform artifactory
      repository(url: 'https://artifactory.wetransform.to/artifactory/libs-release-local') {
        authentication(userName: project.hasProperty('wetfArtifactoryUser') ? wetfArtifactoryUser : '',
          password: project.hasProperty('wetfArtifactoryPassword') ? wetfArtifactoryPassword : '')
      }
      snapshotRepository(url: 'https://artifactory.wetransform.to/artifactory/libs-snapshot-local') {
        authentication(userName: project.hasProperty('wetfArtifactoryUser') ? wetfArtifactoryUser : '',
          password: project.hasProperty('wetfArtifactoryPassword') ? wetfArtifactoryPassword : '')
      }

    }
  }
}


// Workaround for gradle application plugin 'the input line is too long' error on Windows
// see https://gist.github.com/jlmelville/2bfe9277e9e2c0ff79b6
tasks.withType(CreateStartScripts).each { task ->
  task.doLast {
      String text = task.windowsScript.text
      text = text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, { "${it[1]}*" })
      task.windowsScript.write text
  }
}


/*
 * Gradle wrapper
 */
task wrapper(type: Wrapper) {
  gradleVersion = '3.1'
}
